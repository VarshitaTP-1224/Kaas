{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Serendipity Assistants:</p> <p>A. ReconciliationNValidation Assistant: B. Script Writing Assistant: mkdocs writer C. Code Generation Assistant: aider assistant with terminal access feature. 4. Testing for gptme</p> <ol> <li>Good Morning Assistant (Task Provider): Breaks down the task based on the phase document. Provides relevant resources and examples. Provides step by step instructions to achieve the task. Provides a clear goal to help evaluate the task at the end of the day.    1.1: Self       1.1.1 : Thought for the day: Should be based on the kind of work assigned.       1.1.2 : Recap of the project, phase and previous day's task.       1.1.3 : Overview of the day's task.       1.1.4 : Resources and examples.       1.1.5 : Step by step instructions.       1.1.6 : Clear Evaluable goal.</li> </ol> <p>1.2 : Department       1.2.1 : Thought for the day: Should be based on the kind of work assigned.       1.2.2 : Recap of the project, phase and previous day's task.       1.2.3 : Overview of the day's task.       1.2.4 : Resources and examples.       1.2.5 : Step by step instructions.       1.2.6 : Clear Evaluable goal.</p> <p>1.3 : Company       1.3.1 : Thought for the day: Should be based on the kind of work assigned.       1.3.2 : Recap of the project, phase and previous day's task.       1.3.3 : Overview of the day's task.       1.3.4 : Resources and examples.       1.3.5 : Step by step instructions.       1.3.6 : Clear Evaluable goal. Eg: As a user, I want to view all my current accounts in one place so that I can have a consolidated view of my financial obligations.</p> <ol> <li>Good Afternoon Assistant (Task Helper Assistant): Helps in addressing the task from multiple points of view and address a final approach to the task, aligning with the goal of the project. Its more of a Q&amp;A bot(perplexity feature of follow up questions).    2.1 : Should generate inquisitive questions to think from multiple perspectives.    2.2 : Create a quiz to evaluate the user's knowledge gap and clear the gap.    2.3 : Helps write a descriptive approach to solve the task, using additional resources. Eg: Custom links n files    2.4 : Submits a small summary back to knowledge base once the employee accepts the task. (obsidian vault)</li> </ol> <p>output: cursor prompt to write the code.</p> <ol> <li>Good Evening Assistant (Task Eval Assistant): Evaluates the report generated by all employees and takes a recursive approach to solve the root cause of the issue. Should dynamically prepare the next day's task based on the report generated.    3.1 : Should prepare a report department wise collecting the work submitted by employees.    3.2 : Have validations run on each department and prepare final report    3.3 : Address any P0 issues and find root cause.    3.4 : Prepare next day's task dynamically based on today's observations.    3.5 : Send a good evening message to the employee along with appreciation message.</li> </ol>"},{"location":"SerendipityAppPrompt/","title":"SerendipityAppPrompt","text":"<p>I need architechture design for web app to manage my company. It has 3 departments: </p> <p>Company Ethos: Visibility(TradeMan), Communication(Dhoom Studios), Accountablity(Serendipity)</p> <p>Serendipity(Ethical and service wing): This is the accounting department. Its main job is Accounting compliance and Legal. This section of the app should be able to store all the docs and financial transactions. Refer the attached excel sheet for current structure</p> <p>Techinical requirements: 1. 3 way accounting match ([Zoho Bank feeds, Cash registry],Kaas Entry, DepartmentwiseLog via telegram)    a. Integrate AlgoPlane (16+  only) 2. Document storage (Government Docs, Warranty Docs, Utility Bills) 3. Legal and compliance planning</p> <p>Dhoom Studios (Communication and Marketing wing): Sharing is caring. Providing a platform to tell employees their stories. Social and activites side of the company</p> <p>Technical requirements: 1. Social media friends and family type vibe 2. Limitless Developer flow (Create scoring for area of the 15 steps) for trademan 3. Showcase for designers for dhoom studios 5. Custom social/tech feeds based on the working project 6. Podcast recording system (Generate Q&amp;A for podcast. Record using the link. Store, transcribe, format and store to notion). Vision and ethos for serendipity Reference: https://v0.dev/r/hQiCSOjfl3c</p> <p>Karma : Roles, duties, responsibilites with assisted workflows to complete their task faster 1. Podcast recording system (Generate Q&amp;A for podcast. Record using the link. Store, transcribe, format and store to notion)  2. Limitless Developer flow (Create scoring for area of the 15 steps) 3. Custom tech/work feeds based on the working project 4. Workflow managements system (Chat bot to generate ideas) 5. Project management system with links to Notion/github 6. Git stats dashboard (Dashboard to track the work progress in creative using git repo details. Use screenshots/gif for frontend) 7. Machine console (Password manager, RBAC,)</p>"},{"location":"SerendipityAppPrompt/#next-steps","title":"Next steps","text":"<ol> <li>Fabric Integration</li> <li>Kaas Onboard, Khaas improvements and Cause initiation</li> <li>Telegram audio to project pattern</li> <li>Github commits, PRs and better issues management with comments</li> <li>Get last 5 images of Dhoom studios project and help designer (Images should be fetched from local source)</li> <li>Employee Management System (Auto Contract letter, Auto Releiving letter, Auto typing results)</li> <li>Document Management System</li> <li>Native Markdown editor</li> <li>Enterprise chat</li> <li>Open api and claude key management</li> <li>Inventory Management System</li> <li>SQLDB n Excel converters</li> <li>Loading symbol update</li> <li>Cache mechanism. Fetch only from last updated time</li> <li>Backend Kaas app running on server to process all requests</li> <li>Dhoom studios booking system</li> <li>Enterprise search</li> <li>Tag studio integration</li> <li>Open ai api cost integration</li> <li>Password manager with RBAC</li> </ol> <p>Bugs: 1. Remove voice recorder feature for public version 2. Config.json should be part of the package 3. Operating Instructions</p> <p>Claude Dev: /Users/omkar/miniconda3/bin/conda run -n macenv python KaasQt/Kaas.py</p> <p>Hackathon Planning:</p> <p>Day 1: 1. Git account for everyone and fork \"Kaas\" project 2. Cursor SetUp with proper api project access 3. Git Pull \"main\" and clean modules 4. Fix all issues with the refactor 5. Configure config.json and Run 6. Pair programmer and non programmer 7. Create workflow for self. Project Manager creates an improved version of the app</p> <p>Day 2. 1. PyQt explanation 2. Prompt engineering basics 3. Use the given personalized prompt flow to create the app they need</p> <p>PyQt shortcuts: Navigation: Ctrl+E: Switch to Excel Viewer Ctrl+F: Switch to Functions tab Ctrl+G: Switch to Configuration tab Excel Viewer Tab Navigation: Alt+1: Switch to Tasks tab Alt+2: Switch to Accounts(Present) tab Alt+3: Switch to Transactions(Past) tab Alt+4: Switch to Freedom(Future) tab Alt+5: Switch to Category tab Alt+6: Switch to Index tab Additional Controls: Ctrl+Q: Exit the application F11: Toggle fullscreen mode</p> <p>pyinstaller --name=Kaas --windowed --onefile --add-data \"KaasQt/config.json;.\" --icon=\"KaasQt/kaas.ico\" Kaas.py</p> <p>pyinstaller --name=Kaas --windowed --onefile --add-data=\"KaasQt\\config.json;.\" --icon=\"KaasQt\\kaas.ico\" KaasQt\\Kaas.py</p> <p>User has software start up following infra and software choices. 1. coolify via windows ssh via docker 2. windows nvidia 4070x with cuda (prod) 3. mac m2 mini, macbook m2 pro (dev) 4. traefik 5. Internet: jio business isp with static ip 6. Host all apps internally. Need technical assistance</p>"},{"location":"openai_swarm_readme/","title":"Openai swarm readme","text":"<p>Skip to content</p>"},{"location":"openai_swarm_readme/#navigation-menu","title":"Navigation Menu","text":"<p>Toggle navigation </p> <p>Sign in </p> <ul> <li> <p>Product </p> <ul> <li>GitHub Copilot</li> </ul> </li> </ul> <p>Write better code with AI </p> <pre><code>* Security\n</code></pre> <p>Find and fix vulnerabilities </p> <pre><code>* Actions\n</code></pre> <p>Automate any workflow </p> <pre><code>* Codespaces\n</code></pre> <p>Instant dev environments </p> <pre><code>* Issues\n</code></pre> <p>Plan and track work </p> <pre><code>* Code Review\n</code></pre> <p>Manage code changes </p> <pre><code>* Discussions\n</code></pre> <p>Collaborate outside of code </p> <pre><code>* Code Search\n</code></pre> <p>Find more, search less </p> <p>Explore      * All features      * Documentation      * GitHub Skills      * Blog </p> <ul> <li>Solutions </li> </ul> <p>By company size      * Enterprises      * Small and medium teams      * Startups </p> <p>By use case      * DevSecOps      * DevOps      * CI/CD      * View all use cases </p> <p>By industry      * Healthcare      * Financial services      * Manufacturing      * Government      * View all industries </p> <p>View all solutions </p> <ul> <li>Resources </li> </ul> <p>Topics      * AI      * DevOps      * Security      * Software Development      * View all </p> <p>Explore      * Learning Pathways      * White papers, Ebooks, Webinars      * Customer Stories      * Partners </p> <ul> <li> <p>Open Source </p> <ul> <li>GitHub Sponsors</li> </ul> </li> </ul> <p>Fund open source developers </p> <pre><code>* The ReadME Project\n</code></pre> <p>GitHub community articles </p> <p>Repositories      * Topics      * Trending      * Collections </p> <ul> <li> <p>Enterprise </p> <ul> <li>Enterprise platform</li> </ul> </li> </ul> <p>AI-powered developer platform </p> <p>Available add-ons      * Advanced Security</p> <p>Enterprise-grade security features </p> <pre><code>* GitHub Copilot\n</code></pre> <p>Enterprise-grade AI features </p> <pre><code>* Premium Support\n</code></pre> <p>Enterprise-grade 24/7 support </p> <ul> <li>Pricing</li> </ul> <p>Search or jump to... </p>"},{"location":"openai_swarm_readme/#search-code-repositories-users-issues-pull-requests","title":"Search code, repositories, users, issues, pull requests...","text":"<p>Search </p> <p>Clear </p> <p>Search syntax tips </p>"},{"location":"openai_swarm_readme/#provide-feedback","title":"Provide feedback","text":"<p>We read every piece of feedback, and take your input very seriously.</p> <p>Include my email address so I can be contacted</p> <p>Cancel  Submit feedback </p>"},{"location":"openai_swarm_readme/#saved-searches","title":"Saved searches","text":""},{"location":"openai_swarm_readme/#use-saved-searches-to-filter-your-results-more-quickly","title":"Use saved searches to filter your results more quickly","text":"<p>Name</p> <p>Query</p> <p>To see all available qualifiers, see our documentation. </p> <p>Cancel  Create saved search </p> <p>Sign in </p> <p>Sign up  Reseting focus</p> <p>You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. Dismiss alert</p> <p>{{ message }}</p> <p>openai  / swarm Public </p> <ul> <li>Notifications  You must be signed in to change notification settings</li> <li>Fork 1k </li> <li> <p>Star 12.9k </p> </li> <li> <p>Code </p> </li> <li>Issues 7 </li> <li>Pull requests 4 </li> <li>Actions </li> <li>Projects 0 </li> <li>Security </li> <li>Insights </li> </ul> <p>Additional navigation options</p> <ul> <li>Code </li> <li>Issues </li> <li>Pull requests </li> <li>Actions </li> <li>Projects </li> <li>Security </li> <li>Insights </li> </ul>"},{"location":"openai_swarm_readme/#files","title":"Files","text":"<p>main</p> <ul> <li> <p>assets</p> </li> <li> <p>examples</p> </li> <li> <p>logs</p> </li> <li> <p>swarm</p> </li> <li> <p>tests</p> </li> <li> <p>.gitignore</p> </li> <li> <p>.pre-commit-config.yaml</p> </li> <li> <p>LICENSE</p> </li> <li> <p>README.md</p> </li> <li> <p>SECURITY.md</p> </li> <li> <p>pyproject.toml</p> </li> <li> <p>setup.cfg</p> </li> </ul>"},{"location":"openai_swarm_readme/#breadcrumbs","title":"Breadcrumbs","text":"<ol> <li>swarm</li> </ol> <p>/</p>"},{"location":"openai_swarm_readme/#readmemd","title":"README.md","text":"<p>Blame</p> <p>Blame</p>"},{"location":"openai_swarm_readme/#latest-commit","title":"Latest commit","text":""},{"location":"openai_swarm_readme/#history","title":"History","text":"<p>History</p> <p>359 lines (262 loc) \u00b7 16.8 KB</p>"},{"location":"openai_swarm_readme/#breadcrumbs_1","title":"Breadcrumbs","text":"<ol> <li>swarm</li> </ol> <p>/</p>"},{"location":"openai_swarm_readme/#readmemd_1","title":"README.md","text":"<p>Top</p>"},{"location":"openai_swarm_readme/#file-metadata-and-controls","title":"File metadata and controls","text":"<ul> <li> <p>Preview</p> </li> <li> <p>Code</p> </li> <li> <p>Blame</p> </li> </ul> <p>359 lines (262 loc) \u00b7 16.8 KB</p> <p>Raw</p> <p></p>"},{"location":"openai_swarm_readme/#swarm-experimental-educational","title":"Swarm (experimental, educational)","text":"<p>An educational framework exploring ergonomic, lightweight multi-agent orchestration.</p> <p>Warning</p> <p>Swarm is currently an experimental sample framework intended to explore ergonomic interfaces for multi-agent systems. It is not intended to be used in production, and therefore has no official support. (This also means we will not be reviewing PRs or issues!)</p> <p>The primary goal of Swarm is to showcase the handoff &amp; routines patterns explored in the Orchestrating Agents: Handoffs &amp; Routines cookbook. It is not meant as a standalone library, and is primarily for educational purposes.</p>"},{"location":"openai_swarm_readme/#install","title":"Install","text":"<p>Requires Python 3.10+</p> <pre><code>    pip install git+ssh://git@github.com/openai/swarm.git\n</code></pre> <p>or</p> <pre><code>    pip install git+https://github.com/openai/swarm.git\n</code></pre>"},{"location":"openai_swarm_readme/#usage","title":"Usage","text":"<pre><code>    from swarm import Swarm, Agent\n    client = Swarm()\n    def transfer_to_agent_b():\n      return agent_b\n\n    agent_a = Agent(\n      name=\"Agent A\",\n      instructions=\"You are a helpful agent.\",\n      functions=[transfer_to_agent_b],\n    )\n    agent_b = Agent(\n      name=\"Agent B\",\n      instructions=\"Only speak in Haikus.\",\n    )\n    response = client.run(\n      agent=agent_a,\n      messages=[{\"role\": \"user\", \"content\": \"I want to talk to agent B.\"}],\n    )\n    print(response.messages[-1][\"content\"])\n</code></pre> <pre><code>    Hope glimmers brightly,\n    New paths converge gracefully,\n    What can I assist?\n</code></pre>"},{"location":"openai_swarm_readme/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Examples</li> <li>Documentation<ul> <li>Running Swarm</li> <li>Agents</li> <li>Functions</li> <li>Streaming</li> </ul> </li> <li>Evaluations</li> <li>Utils</li> </ul>"},{"location":"openai_swarm_readme/#overview","title":"Overview","text":"<p>Swarm focuses on making agent coordination and execution lightweight, highly controllable, and easily testable.</p> <p>It accomplishes this through two primitive abstractions: Agents and handoffs. An Agent encompasses instructions and tools, and can at any point choose to hand off a conversation to another Agent.</p> <p>These primitives are powerful enough to express rich dynamics between tools and networks of agents, allowing you to build scalable, real-world solutions while avoiding a steep learning curve.</p> <p>Note</p> <p>Swarm Agents are not related to Assistants in the Assistants API. They are named similarly for convenience, but are otherwise completely unrelated. Swarm is entirely powered by the Chat Completions API and is hence stateless between calls.</p>"},{"location":"openai_swarm_readme/#why-swarm","title":"Why Swarm","text":"<p>Swarm explores patterns that are lightweight, scalable, and highly customizable by design. Approaches similar to Swarm are best suited for situations dealing with a large number of independent capabilities and instructions that are difficult to encode into a single prompt.</p> <p>The Assistants API is a great option for developers looking for fully-hosted threads and built in memory management and retrieval. However, Swarm is an educational resource for developers curious to learn about multi-agent orchestration. Swarm runs (almost) entirely on the client and, much like the Chat Completions API, does not store state between calls.</p>"},{"location":"openai_swarm_readme/#examples","title":"Examples","text":"<p>Check out /examples for inspiration! Learn more about each one in its README.</p> <ul> <li>basic: Simple examples of fundamentals like setup, function calling, handoffs, and context variables</li> <li>triage_agent: Simple example of setting up a basic triage step to hand off to the right agent</li> <li>weather_agent: Simple example of function calling</li> <li>airline: A multi-agent setup for handling different customer service requests in an airline context.</li> <li>support_bot: A customer service bot which includes a user interface agent and a help center agent with several tools</li> <li>personal_shopper: A personal shopping agent that can help with making sales and refunding orders</li> </ul>"},{"location":"openai_swarm_readme/#documentation","title":"Documentation","text":""},{"location":"openai_swarm_readme/#running-swarm","title":"Running Swarm","text":"<p>Start by instantiating a Swarm client (which internally just instantiates an OpenAI client).</p> <pre><code>    from swarm import Swarm\n    client = Swarm()\n</code></pre>"},{"location":"openai_swarm_readme/#clientrun","title":"client.run()","text":"<p>Swarm's run() function is analogous to the chat.completions.create() function in the Chat Completions API \u2013 it takes messages and returns messages and saves no state between calls. Importantly, however, it also handles Agent function execution, hand-offs, context variable references, and can take multiple turns before returning to the user.</p> <p>At its core, Swarm's client.run() implements the following loop:</p> <ol> <li>Get a completion from the current Agent</li> <li>Execute tool calls and append results</li> <li>Switch Agent if necessary</li> <li>Update context variables, if necessary</li> <li>If no new function calls, return</li> </ol>"},{"location":"openai_swarm_readme/#arguments","title":"Arguments","text":"Argument Type Description Default agent Agent The (initial) agent to be called. (required) messages List A list of message objects, identical to Chat Completions messages (required) context_variables dict A dictionary of additional context variables, available to functions and Agent instructions {} max_turns int The maximum number of conversational turns allowed float(\"inf\") model_override str An optional string to override the model being used by an Agent None execute_tools bool If False, interrupt execution and immediately returns tool_calls message when an Agent tries to call a function True stream bool If True, enables streaming responses False debug bool If True, enables debug logging False <p>Once client.run() is finished (after potentially multiple calls to agents and tools) it will return a Response containing all the relevant updated state. Specifically, the new messages, the last Agent to be called, and the most up-to-date context_variables. You can pass these values (plus new user messages) in to your next execution of client.run() to continue the interaction where it left off \u2013 much like chat.completions.create(). (The run_demo_loop function implements an example of a full execution loop in /swarm/repl/repl.py.)</p>"},{"location":"openai_swarm_readme/#response-fields","title":"Response Fields","text":"Field Type Description messages List A list of message objects generated during the conversation. Very similar to Chat Completions messages, but with a sender field indicating which Agent the message originated from. agent Agent The last agent to handle a message. context_variables dict The same as the input variables, plus any changes."},{"location":"openai_swarm_readme/#agents","title":"Agents","text":"<p>An Agent simply encapsulates a set of instructions with a set of functions (plus some additional settings below), and has the capability to hand off execution to another Agent.</p> <p>While it's tempting to personify an Agent as \"someone who does X\", it can also be used to represent a very specific workflow or step defined by a set of instructions and functions (e.g. a set of steps, a complex retrieval, single step of data transformation, etc). This allows Agents to be composed into a network of \"agents\", \"workflows\", and \"tasks\", all represented by the same primitive.</p>"},{"location":"openai_swarm_readme/#agent-fields","title":"Agent Fields","text":"Field Type Description Default name str The name of the agent. \"Agent\" model str The model to be used by the agent. \"gpt-4o\" instructions str or func() -&gt; str Instructions for the agent, can be a string or a callable returning a string. \"You are a helpful agent.\" functions List A list of functions that the agent can call. [] tool_choice str The tool choice for the agent, if any. None"},{"location":"openai_swarm_readme/#instructions","title":"Instructions","text":"<p>Agent instructions are directly converted into the system prompt of a conversation (as the first message). Only the instructions of the active Agent will be present at any given time (e.g. if there is an Agent handoff, the system prompt will change, but the chat history will not.)</p> <pre><code>    agent = Agent(\n      instructions=\"You are a helpful agent.\"\n    )\n</code></pre> <p>The instructions can either be a regular str, or a function that returns a str. The function can optionally receive a context_variables parameter, which will be populated by the context_variables passed into client.run().</p> <pre><code>    def instructions(context_variables):\n      user_name = context_variables[\"user_name\"]\n      return f\"Help the user, {user_name}, do whatever they want.\"\n    agent = Agent(\n      instructions=instructions\n    )\n    response = client.run(\n      agent=agent,\n      messages=[{\"role\":\"user\", \"content\": \"Hi!\"}],\n      context_variables={\"user_name\":\"John\"}\n    )\n    print(response.messages[-1][\"content\"])\n</code></pre> <pre><code>    Hi John, how can I assist you today?\n</code></pre>"},{"location":"openai_swarm_readme/#functions","title":"Functions","text":"<ul> <li>Swarm Agents can call python functions directly.</li> <li>Function should usually return a str (values will be attempted to be cast as a str).</li> <li>If a function returns an Agent, execution will be transferred to that Agent.</li> <li>If a function defines a context_variables parameter, it will be populated by the context_variables passed into client.run().</li> </ul> <pre><code>    def greet(context_variables, language):\n      user_name = context_variables[\"user_name\"]\n      greeting = \"Hola\" if language.lower() == \"spanish\" else \"Hello\"\n      print(f\"{greeting}, {user_name}!\")\n      return \"Done\"\n    agent = Agent(\n      functions=[greet]\n    )\n    client.run(\n      agent=agent,\n      messages=[{\"role\": \"user\", \"content\": \"Usa greet() por favor.\"}],\n      context_variables={\"user_name\": \"John\"}\n    )\n</code></pre> <pre><code>    Hola, John!\n</code></pre> <ul> <li>If an Agent function call has an error (missing function, wrong argument, error) an error response will be appended to the chat so the Agent can recover gracefully.</li> <li>If multiple functions are called by the Agent, they will be executed in that order.</li> </ul>"},{"location":"openai_swarm_readme/#handoffs-and-updating-context-variables","title":"Handoffs and Updating Context Variables","text":"<p>An Agent can hand off to another Agent by returning it in a function.</p> <pre><code>    sales_agent = Agent(name=\"Sales Agent\")\n    def transfer_to_sales():\n      return sales_agent\n    agent = Agent(functions=[transfer_to_sales])\n    response = client.run(agent, [{\"role\":\"user\", \"content\":\"Transfer me to sales.\"}])\n    print(response.agent.name)\n</code></pre> <pre><code>    Sales Agent\n</code></pre> <p>It can also update the context_variables by returning a more complete Result object. This can also contain a value and an agent, in case you want a single function to return a value, update the agent, and update the context variables (or any subset of the three).</p> <pre><code>    sales_agent = Agent(name=\"Sales Agent\")\n    def talk_to_sales():\n      print(\"Hello, World!\")\n      return Result(\n        value=\"Done\",\n        agent=sales_agent,\n        context_variables={\"department\": \"sales\"}\n      )\n    agent = Agent(functions=[talk_to_sales])\n    response = client.run(\n      agent=agent,\n      messages=[{\"role\": \"user\", \"content\": \"Transfer me to sales\"}],\n      context_variables={\"user_name\": \"John\"}\n    )\n    print(response.agent.name)\n    print(response.context_variables)\n</code></pre> <pre><code>    Sales Agent\n    {'department': 'sales', 'user_name': 'John'}\n</code></pre> <p>Note</p> <p>If an Agent calls multiple functions to hand-off to an Agent, only the last handoff function will be used.</p>"},{"location":"openai_swarm_readme/#function-schemas","title":"Function Schemas","text":"<p>Swarm automatically converts functions into a JSON Schema that is passed into Chat Completions tools.</p> <ul> <li>Docstrings are turned into the function description.</li> <li>Parameters without default values are set to required.</li> <li>Type hints are mapped to the parameter's type (and default to string).</li> <li>Per-parameter descriptions are not explicitly supported, but should work similarly if just added in the docstring. (In the future docstring argument parsing may be added.)</li> </ul> <pre><code>    def greet(name, age: int, location: str = \"New York\"):\n      \"\"\"Greets the user. Make sure to get their name and age before calling.\n      Args:\n       name: Name of the user.\n       age: Age of the user.\n       location: Best place on earth.\n      \"\"\"\n      print(f\"Hello {name}, glad you are {age} in {location}!\")\n</code></pre> <pre><code>    {\n      \"type\": \"function\",\n      \"function\": {\n       \"name\": \"greet\",\n       \"description\": \"Greets the user. Make sure to get their name and age before calling.\\n\\nArgs:\\n  name: Name of the user.\\n  age: Age of the user.\\n  location: Best place on earth.\",\n       \"parameters\": {\n         \"type\": \"object\",\n         \"properties\": {\n          \"name\": {\"type\": \"string\"},\n          \"age\": {\"type\": \"integer\"},\n          \"location\": {\"type\": \"string\"}\n         },\n         \"required\": [\"name\", \"age\"]\n       }\n      }\n    }\n</code></pre>"},{"location":"openai_swarm_readme/#streaming","title":"Streaming","text":"<pre><code>    stream = client.run(agent, messages, stream=True)\n    for chunk in stream:\n      print(chunk)\n</code></pre> <p>Uses the same events as Chat Completions API streaming. See process_and_print_streaming_response in /swarm/repl/repl.py as an example.</p> <p>Two new event types have been added:</p> <ul> <li>{\"delim\":\"start\"} and {\"delim\":\"end\"}, to signal each time an Agent handles a single message (response or function call). This helps identify switches between Agents.</li> <li>{\"response\": Response} will return a Response object at the end of a stream with the aggregated (complete) response, for convenience.</li> </ul>"},{"location":"openai_swarm_readme/#evaluations","title":"Evaluations","text":"<p>Evaluations are crucial to any project, and we encourage developers to bring their own eval suites to test the performance of their swarms. For reference, we have some examples for how to eval swarm in the airline, weather_agent and triage_agent quickstart examples. See the READMEs for more details.</p>"},{"location":"openai_swarm_readme/#utils","title":"Utils","text":"<p>Use the run_demo_loop to test out your swarm! This will run a REPL on your command line. Supports streaming.</p> <pre><code>    from swarm.repl import run_demo_loop\n    ...\n    run_demo_loop(agent, stream=True)\n</code></pre>"},{"location":"openai_swarm_readme/#core-contributors","title":"Core Contributors","text":"<ul> <li>Ilan Bigio - ibigio</li> <li>James Hills - jhills20</li> <li>Shyamal Anadkat - shyamal-anadkat</li> <li>Charu Jaiswal - charuj</li> <li>Colin Jarvis - colin-openai</li> <li>Katia Gil Guzman - katia-openai</li> </ul>"},{"location":"openai_swarm_readme/#footer","title":"Footer","text":"<p>\u00a9 2024 GitHub, Inc. </p>"},{"location":"openai_swarm_readme/#footer-navigation","title":"Footer navigation","text":"<ul> <li>Terms</li> <li>Privacy</li> <li>Security</li> <li>Status</li> <li>Docs</li> <li>Contact</li> <li>Manage cookies </li> <li>Do not share my personal information </li> </ul> <p>You can\u2019t perform that action at this time. </p>"},{"location":"promptmaker/","title":"Promptmaker","text":"<p>Let me provide an overview of what we are trying to achieve with this particular project so that you can modify this PRD to the requirement. PRD should have three sections: Goal, Methodology and Implementation details Accounts(present):</p> <p>Goal for this project: Excel is kind of the universal tool for all the accounting related purpose. It has more implication than we can think of. So this particular tool is for accountants and not just that anybody who uses Excel. This is advanced chat with Excel product in which even construction people can use it for estimates, accountant can use it for transactions. So because this works on atomic transaction concept, Krama and Karma. Krama is the order of input and karma is the order of output. </p> <p>Today is October 11th. I need you to create a day-by-day plan to implement this particular project. So go about and create a comprehensive plan. The first three features I need are, use the user stories whatever you've created. So those should be the first six key features. Think carefully and create a step-by-step plan. I need to finish this project by 15th so you can load up a lot of features in a day doesn't matter but plan carefully and make it according to solid principles.Make it as a fifth section. </p> <p>Excel subs: Future sheet functions: 1. Add recurring entry 2. Remove recurring entry 8. Add Payment date field and process future transaction 9. Priority Assignment/Time Assignment</p> <p>Past sheet functions: 3. Daily transaction report 4. Category reconcile and delete sheets 6. 3way analysis refactor 9. Add new transaction function 10. Asset sheet generation</p> <p>Present sheet functions: 7. Account wise validation with past transactions 5. Refactor dashboard code</p> <p>General: 1. Bankfeed and cash index doc: Include guideline while paying via various mode 2. Zoho api integration for current acc feed  3. Parse bank and credit card statements 4. Mega reconcilation to justify every paise spent upto date  5. Cash registry and bank feed validation</p>"}]}